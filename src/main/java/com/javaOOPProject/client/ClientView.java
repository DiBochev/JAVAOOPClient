/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.javaOOPProject.client;

import com.javaOOPProject.client.massages.GUIMessages;
import com.javaOOPProject.client.massages.ServerClientRespondMassage;
import com.javaOOPProject.client.regularExpressions.RegularExpressions;
import java.io.IOException;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.swing.JTextField;

/**
 *
 * @author fgg12
 */
public class ClientView extends javax.swing.JFrame {

    Client client = null;
    Connector conn = null;

    /**
     * Creates new form ClientView
     */
    public ClientView() {
        initComponents();
        ErrorMassage.setVisible(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        LabelUserName = new javax.swing.JLabel();
        LabelPassword = new javax.swing.JLabel();
        UserNameTextField = new javax.swing.JTextField();
        PasswordTextField = new javax.swing.JTextField();
        ConnectButton = new javax.swing.JButton();
        ServerURLTextField = new javax.swing.JTextField();
        ServerLabel = new javax.swing.JLabel();
        PingTextField = new javax.swing.JTextField();
        ErrorMassage = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        LabelUserName.setText("username");

        LabelPassword.setText("password");

        UserNameTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                UserNameTextFieldActionPerformed(evt);
            }
        });

        ConnectButton.setText("connect");
        ConnectButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ConnectButtonActionPerformed(evt);
            }
        });

        ServerURLTextField.setText("192.168.0.101");
        ServerURLTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ServerURLTextFieldActionPerformed(evt);
            }
        });

        ServerLabel.setText(":");

        PingTextField.setText("12345");

        ErrorMassage.setText("Error");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(42, 42, 42)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(LabelUserName)
                                    .addComponent(LabelPassword))
                                .addGap(42, 42, 42)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(UserNameTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 169, Short.MAX_VALUE)
                                    .addComponent(PasswordTextField)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(ServerURLTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(ServerLabel)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(PingTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                            .addComponent(ConnectButton)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(72, 72, 72)
                        .addComponent(ErrorMassage, javax.swing.GroupLayout.DEFAULT_SIZE, 185, Short.MAX_VALUE)
                        .addGap(43, 43, 43)))
                .addGap(100, 100, 100))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(17, 17, 17)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ServerURLTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(ServerLabel)
                    .addComponent(PingTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(LabelUserName, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(UserNameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(LabelPassword)
                    .addComponent(PasswordTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(62, 62, 62)
                .addComponent(ConnectButton)
                .addGap(18, 18, 18)
                .addComponent(ErrorMassage, javax.swing.GroupLayout.DEFAULT_SIZE, 56, Short.MAX_VALUE)
                .addGap(26, 26, 26))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void UserNameTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_UserNameTextFieldActionPerformed

    }//GEN-LAST:event_UserNameTextFieldActionPerformed

    private void ConnectButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ConnectButtonActionPerformed
        ErrorMassage.setVisible(false);
        if (!validator(UserNameTextField, RegularExpressions.VALIDATE_USERNAME.getRegex(), GUIMessages.WRONG_FORMAT_USERNAME.getRegex())) {
            return;
        }
        if (!validator(PasswordTextField, RegularExpressions.VALIDATE_USERNAME.getRegex(), GUIMessages.WRONG_FORMAT_PASSWORD.getRegex())) {
            return;
        }
        if (!validator(ServerURLTextField, RegularExpressions.VALIDATE_IP_ADRESS.getRegex(), GUIMessages.WRONG_FORMAT_IP_ADRESS.getRegex())) {
            return;
        }
        if (!validator(PingTextField, RegularExpressions.VALIDATE_PING.getRegex(), GUIMessages.WRONG_FORMAT_PING.getRegex())) {
            return;
        }
        client = new Client(UserNameTextField.getText(), PasswordTextField.getText(), ServerClientRespondMassage.message2.getMessage());
        conn = new Connector(ServerURLTextField.getText(), Integer.parseInt(PingTextField.getText()));
        if (conn.isServerUp()) {
            try {
                conn.sentRequestToServer(client);
                System.out.println("sended massage");
                System.out.println("massage from server: " + conn.recieveMassageFromServer());
                conn.closeSocket();
            } catch (IOException ex) {
                ex.printStackTrace();
                ErrorMassage.setVisible(true);
                ErrorMassage.setText(GUIMessages.WRONG_USERNAME_AND_OR_PASSWORD.getRegex());
            }
        } else {
            ErrorMassage.setVisible(true);
            ErrorMassage.setText(GUIMessages.CANNOT_CONNECT_TO_SERVER.getRegex());
        }
    }//GEN-LAST:event_ConnectButtonActionPerformed

    private void ServerURLTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ServerURLTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_ServerURLTextFieldActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton ConnectButton;
    private javax.swing.JLabel ErrorMassage;
    private javax.swing.JLabel LabelPassword;
    private javax.swing.JLabel LabelUserName;
    private javax.swing.JTextField PasswordTextField;
    private javax.swing.JTextField PingTextField;
    private javax.swing.JLabel ServerLabel;
    private javax.swing.JTextField ServerURLTextField;
    private javax.swing.JTextField UserNameTextField;
    // End of variables declaration//GEN-END:variables

    private boolean validator(JTextField field, String regex, String massage) {
        Pattern pattern = Pattern.compile(regex);
        Matcher matcher = pattern.matcher(field.getText());
        if (!matcher.matches()) {
            ErrorMassage.setText(massage);
            ErrorMassage.setVisible(true);
        }
        return matcher.matches();
    }

}
